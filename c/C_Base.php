<?php//// Базовый контроллер сайта.//abstract class C_Base extends C_Controller{	protected $title;		// заголовок страницы	protected $content;		// содержание страницы	protected $needLogin;	// необходима ли авторизация	protected $user;		// авторизованный пользователь || null	protected $keywords;			protected $description;			protected $top_menu;			protected $left_menu;	protected $styles;	protected $scripts;	protected $core_styles;		protected $core_scripts;		protected $adminlink; // ссылка на админку для залогиненых		protected $cache_mode;	protected $twig;	//	// Конструктор.	//	function __construct()	{			parent::__construct();		$this->needLogin = false;		$this->keywords = '';		$this->description = '';		$this->user = M_Users::Instance()->Get();		$this->styles = array('style', 'lightbox', 'navbar');		$this->scripts = array('html5shiv', 'lightbox-2.6.min', 'jquery.cycle2.min');		$this->core_styles = array();		$this->core_scripts = array('jQuery');		$this->adminlink = false;		$this->cache_mode = CACHE;		$this->template_maker = TEMPLATE_MAKER;		$this->template_class->set_base('themes/' . CURENT_THEME . '/');	}		protected function before()	{		if($this->needLogin && $this->user === null)			$this->redirect('/auth/login');			if(M_Users::Instance()->Can('PAGES')){			$this->core_styles[] = 'jquery-ui-1.10.1.custom.min';			$this->core_scripts[] = 'jquery-ui-1.10.1.custom.min';			$this->core_scripts[] = 'ckeditor/ckeditor';			$this->core_scripts[] = 'widget-controls';			$this->core_scripts[] = 'widget-replaces';			$this->core_scripts[] = 'widget-toggle';			$this->adminlink = true;			$this->cache_mode = false;		}else{			//			// если человек не админ, а страница окажется в кеше - завершаем скрипт			//			if($this->cache_mode){				$page = Cache::get(implode('/', $this->params));								if($page !== false)					die($page);			}		}				$this->top_menu = M_Menu::Instance()->getTopMenu();		$this->left_menu = $this->top_menu; // по умолчанию. Дети переопределят.		$this->title = 'Название сайта';		$this->content = '';	}		//	// Генерация базового шаблонаы	//		public function render()	{		$url = implode('/', $this->params);		$mMenu = M_Menu::Instance();				foreach($this->top_menu as $key => $temp)		   $this->top_menu[$key]['is_active'] = $mMenu->is_active($url, $temp['full_cache_url']);		  		foreach($this->left_menu as $key => $temp){		   $this->left_menu[$key]['is_active'] = $mMenu->is_active($url, $temp['full_cache_url']);		   		   if($this->left_menu[$key]['is_active']){		    $this->left_menu[$key]['children'] = M_Pages::Instance()->getByParent($temp['id_page']);		    		    foreach($this->left_menu[$key]['children'] as $k => $child)		     $this->left_menu[$key]['children'][$k]['is_active'] = $mMenu->is_active($url, $child['full_cache_url']);		   }		 }		$vars = array('title' => $this->title, 'content' => $this->content, 					'keywords' => $this->keywords, 'description' => $this->description,					'top_menu' => $this->top_menu, 'left_menu' => $this->left_menu,					 'styles' => $this->styles, 'scripts' => $this->scripts,					 'core_styles' => $this->core_styles, 'core_scripts' => $this->core_scripts,					 'adminlink'=> $this->adminlink, 'langs' => I18n::langs_arr(), 'current' => I18n::language(),					 'return' => implode('/', $this->params));			$page = $this->Template("base_templates/".MAIN_TEMPLATE, $vars);						$page = $this->replace_widgets($page);				if($this->cache_mode)			Cache::push(implode('/', $this->params), $page);				echo $page;	}}